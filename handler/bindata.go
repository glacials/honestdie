// Code generated by go-bindata.
// sources:
// assets/css/body.css
// assets/html/index.html
// assets/js/app.js
// DO NOT EDIT!

package handler

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsCssBodyCss = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4a\xca\x4f\xa9\x54\xa8\xe6\x52\x50\x48\xcb\xcf\x2b\xd1\x4d\x4b\xcc\xcd\xcc\xa9\xb4\x52\xf0\x48\x2c\xca\x4d\x2c\x29\x49\xcc\xb3\x86\xc9\x14\x67\x56\xa5\x5a\x29\x18\xea\x19\xa7\xe6\x5a\x73\xd5\x72\x01\x02\x00\x00\xff\xff\x30\xd8\xd3\xf8\x37\x00\x00\x00")

func assetsCssBodyCssBytes() ([]byte, error) {
	return bindataRead(
		_assetsCssBodyCss,
		"assets/css/body.css",
	)
}

func assetsCssBodyCss() (*asset, error) {
	bytes, err := assetsCssBodyCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/css/body.css", size: 55, mode: os.FileMode(420), modTime: time.Unix(1469988667, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _assetsHtmlIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x51\xb1\x52\xec\x30\x0c\xec\xdf\x57\x78\x5c\x3d\x9a\xa8\x67\x9c\xd0\x50\x5c\x41\xc5\x0f\x30\x8a\xa3\x8b\x7d\xa7\xd8\xc1\x52\x18\xf2\xf7\xc4\x97\x1c\xcc\x50\x52\x45\xf1\xae\xb4\xda\x95\x0b\x3a\x71\xf7\xcf\x18\x17\x08\x87\x5a\x6c\x25\xc7\x74\x35\x85\xb8\xb5\xa2\x2b\x93\x04\x22\xb5\x46\xd7\x99\x5a\xab\xf4\xa9\xe0\x45\xac\x09\x85\xce\xad\x0d\xaa\xb3\x3c\x02\x9c\x73\x52\x69\xc6\x9c\x47\x26\x9c\xa3\x34\x3e\x4f\x95\xf7\x74\xc6\x29\xf2\xda\x9e\xb0\x4c\xa8\x8a\xc9\xfe\x41\x04\x50\x84\x54\xea\x13\xf4\x79\x58\x9b\x8a\x1d\x73\x34\x2a\xd3\x5e\x1b\x73\xca\x89\x44\xcd\x73\xa4\x1d\x84\x6f\xd4\xc1\xdd\xa0\xab\x13\x8e\xe6\x7e\x51\xcd\xc9\xe4\xe4\x39\xfa\x6b\x6b\x0b\xbd\x2f\xdb\x80\xd7\xcc\xfc\xff\xc1\x76\xf5\xeb\x60\x27\x1d\x1d\x43\xfc\x30\x71\x68\x2d\xe7\xd1\x76\x0e\xb6\xdf\x03\x10\x5f\xe2\xac\x46\x8a\xff\xd9\xf7\x22\x80\xf3\xdc\x5c\xa4\x52\x77\xc2\x9d\x3d\x21\xbf\xdc\xb7\x76\xf8\x2b\xcc\x31\x6a\x58\xfa\x5b\x84\x23\xa3\x8f\xc8\x02\xe1\x66\x6d\x88\xb4\x85\x84\x65\x24\x6d\xed\x5b\xcf\x98\xae\xb6\x93\xbc\x14\x4f\xc6\xe7\x81\x1c\xe0\xa1\x00\x55\x62\x3f\x2d\xec\x8e\xb7\x08\x6e\xc7\xfe\x0a\x00\x00\xff\xff\xbd\x26\xe8\x73\xf4\x01\x00\x00")

func assetsHtmlIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsHtmlIndexHtml,
		"assets/html/index.html",
	)
}

func assetsHtmlIndexHtml() (*asset, error) {
	bytes, err := assetsHtmlIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/html/index.html", size: 500, mode: os.FileMode(420), modTime: time.Unix(1470004911, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _assetsJsAppJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x53\xcd\x8a\xdb\x30\x10\xbe\xe7\x29\x06\x5d\xe2\xd0\x45\xee\xb1\x64\xb7\x81\x16\x0a\x6d\xd9\xb6\xb0\x5b\xe8\xa1\xf4\x20\x4b\xe3\xac\x12\x7b\x94\x4a\x72\x4c\x28\x79\xf7\x8e\xa4\x40\x7c\x31\x64\x73\x71\x24\x7d\x7f\x9a\x19\x1d\x95\x87\xe0\xf4\x1e\x23\xbc\x07\xc2\x11\x7e\x61\xf3\x9c\xd7\x95\x18\xc3\xba\xae\x5f\x1c\x61\x88\xc6\xa2\xd4\xae\x5f\xbf\x7b\x5b\x8f\xd8\x14\x82\x58\xdd\x2f\x12\xbd\x73\x5b\xe6\x1a\xa7\x87\x1e\x29\xca\x2d\xc6\x4f\x1d\xa6\xbf\x1f\x4f\x5f\x4c\x25\xf8\x38\x21\x17\x85\x24\x1d\xf5\x18\x82\xda\x22\x73\xda\x81\x74\xb4\x8e\xa0\xc2\x23\xe3\x57\xf0\x6f\x01\x90\x24\x5b\xaf\xfa\x04\xf8\xfa\xfc\xe3\xbb\x3c\x28\x1f\xb0\x20\xa4\x51\x51\xb1\x18\x40\x18\x6d\xd4\x2f\x55\x06\xca\x78\x3a\x60\x21\x03\x68\x15\x10\x44\x88\x2a\x0e\x41\xac\xf3\x16\xa4\x88\xd2\x52\x40\x1f\x3f\x98\x9d\xd2\xac\xf4\xf9\xe7\xb7\xc7\x6a\xd9\x60\xeb\x3c\x22\x99\xe5\x5d\xf1\x94\x85\x08\x6f\x40\x3c\x34\x1e\xea\x8d\xc8\x6e\xe9\xd7\x78\x54\xfb\xfb\x89\x87\x76\x03\x45\xe3\x46\x7a\x95\x8d\xf0\xae\xeb\x2c\x6d\xc1\x12\x08\xf6\xb9\xd8\xa2\x76\x64\xc2\x23\xb6\xf1\x26\xef\x24\xf2\x7a\x5b\xe0\xf5\xc4\x54\x2b\x32\x96\x2b\x8a\x41\xee\x9c\xa5\x8a\x61\xcb\x55\xb2\x5f\xc3\x43\xb3\xb9\xe2\x46\x4b\x84\x3e\xe7\xaa\x9b\xcd\x6c\xb6\xf3\xe2\x3c\xe9\xb2\x3b\x20\xcd\xb5\xf8\xa6\xc0\x49\x00\xcd\xd5\xed\x3c\x9d\x21\xdd\xb9\x30\x3b\x41\x37\xc9\x67\x85\x39\x79\xf4\x9e\x2b\x35\x23\xcf\x9d\x0a\xae\x43\xc9\x36\x97\xed\xc2\xce\x8f\x21\x95\xf9\x09\xff\x0e\xfc\x66\x98\x9f\xe0\x22\x4d\x27\x97\x54\x4c\x8e\xc4\x5d\x3a\xb8\xd6\x9f\x8f\x7f\x8b\x06\x49\x70\xb0\x1d\xb6\x6d\xfa\xee\xf1\x68\xf3\x06\x7f\xd2\x1d\xc4\x9f\xec\x92\x4d\x8a\xca\x53\x6a\xe9\x34\x64\xc9\x77\xb9\x45\xe0\x8b\x56\xf9\x01\x85\xe8\x79\xe0\x6c\x7b\xaa\x26\x11\x56\x25\xf5\xff\x00\x00\x00\xff\xff\x8a\x19\xd2\x4a\x00\x04\x00\x00")

func assetsJsAppJsBytes() ([]byte, error) {
	return bindataRead(
		_assetsJsAppJs,
		"assets/js/app.js",
	)
}

func assetsJsAppJs() (*asset, error) {
	bytes, err := assetsJsAppJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/js/app.js", size: 1024, mode: os.FileMode(420), modTime: time.Unix(1470003899, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/css/body.css": assetsCssBodyCss,
	"assets/html/index.html": assetsHtmlIndexHtml,
	"assets/js/app.js": assetsJsAppJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"css": &bintree{nil, map[string]*bintree{
			"body.css": &bintree{assetsCssBodyCss, map[string]*bintree{
			}},
		}},
		"html": &bintree{nil, map[string]*bintree{
			"index.html": &bintree{assetsHtmlIndexHtml, map[string]*bintree{
			}},
		}},
		"js": &bintree{nil, map[string]*bintree{
			"app.js": &bintree{assetsJsAppJs, map[string]*bintree{
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

