// Code generated by go-bindata.
// sources:
// assets/css/body.css
// assets/html/index.html
// assets/js/app.js
// DO NOT EDIT!

package handler

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsCssBodyCss = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4a\xca\x4f\xa9\x54\xa8\xe6\x52\x50\x48\xcb\xcf\x2b\xd1\x4d\x4b\xcc\xcd\xcc\xa9\xb4\x52\xf0\x48\x2c\xca\x4d\x2c\x29\x49\xcc\xb3\x86\xc9\x14\x67\x56\xa5\x5a\x29\x18\xea\x19\xa7\xe6\x5a\x73\xd5\x72\x01\x02\x00\x00\xff\xff\x30\xd8\xd3\xf8\x37\x00\x00\x00")

func assetsCssBodyCssBytes() ([]byte, error) {
	return bindataRead(
		_assetsCssBodyCss,
		"assets/css/body.css",
	)
}

func assetsCssBodyCss() (*asset, error) {
	bytes, err := assetsCssBodyCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/css/body.css", size: 55, mode: os.FileMode(420), modTime: time.Unix(1469988667, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _assetsHtmlIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x90\xb1\x5a\xc4\x20\x10\x84\x7b\x9f\x62\x3f\x2a\x6d\x42\xef\x07\x67\x63\x71\xb5\x6f\xc0\x91\x4d\xc2\xdd\x86\x45\x76\xcf\xcf\xbc\xbd\x41\xa2\xf6\x56\x0c\xcc\xec\xf0\x83\x5b\x74\xa5\xd3\x03\x80\x5b\x30\x8c\x4d\xec\x92\x52\xbe\x41\x45\xf2\x46\x74\x23\x94\x05\x51\x0d\xe8\x56\xd0\x1b\xc5\x4f\xb5\x51\xc4\xc0\x52\x71\xf2\x66\x51\x2d\xf2\x6c\xed\xc4\x59\x65\x98\x99\x67\xc2\x50\x92\x0c\x91\xd7\x96\x7b\x99\xc2\x9a\x68\xf3\xe7\x50\xd7\xa0\x1a\xb2\xf9\xc7\x25\x36\x88\xa0\x4a\x3b\xb2\x17\x1e\xb7\xa1\x79\x47\x8f\x26\x25\xec\x1a\xe0\xcc\x19\x45\xe1\x35\x61\x37\xed\xaf\xeb\xec\xcf\x03\x5d\x6b\x38\x86\x2f\x77\x55\xce\xc0\x39\x52\x8a\x37\x6f\x2a\xbe\xdf\xf7\x82\x37\x26\x7a\x7c\x32\xa7\xb6\x3a\xdb\x43\xc7\xc4\x98\x3e\x20\x8d\xde\x10\xcf\xe6\xe4\xec\xbe\x3d\x0c\x89\x35\x15\x05\xa9\xf1\x8f\xf7\x2a\x36\x94\x32\x5c\xa5\x45\x7b\xa0\xb3\x74\x84\x9d\xe9\xfb\xf7\xbf\x02\x00\x00\xff\xff\xfe\x8d\x1c\x0d\x85\x01\x00\x00")

func assetsHtmlIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsHtmlIndexHtml,
		"assets/html/index.html",
	)
}

func assetsHtmlIndexHtml() (*asset, error) {
	bytes, err := assetsHtmlIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/html/index.html", size: 389, mode: os.FileMode(420), modTime: time.Unix(1469991594, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _assetsJsAppJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x53\xc1\x8a\xdb\x30\x10\xbd\xe7\x2b\x06\x5d\xe2\xd0\xc5\xde\xe3\x92\xdd\x06\x5a\x28\xb4\x65\xdb\xc2\x6e\xa1\x87\xd2\x83\x2c\x8f\xb3\x4a\x1c\x29\xd5\xc8\x31\xa1\xe4\xdf\x3b\x23\x05\xe2\x8b\x21\xf1\x45\x96\xe6\xcd\x7b\x4f\x33\xa3\x83\x0e\x40\xde\x6c\x31\xc2\x7b\x70\x38\xc0\x2f\xac\x5f\xd3\xbe\x50\x03\x2d\xab\xaa\xf3\x46\x77\x6f\x9e\xe2\xf2\xe1\xfe\xe1\xbe\x1a\xb0\xce\x70\xb5\x78\x9c\x49\x72\xe7\xd7\x9c\xd9\x78\xd3\xef\xd0\xc5\x72\x8d\xf1\x53\x87\xf2\xfb\xf1\xf8\xa5\x29\x14\x87\x05\x39\xcb\x49\xa5\x77\x3b\x24\xd2\x6b\xe4\x9c\xb6\x77\x26\x5a\xef\xa0\xc0\x03\xe3\x17\xf0\x6f\x06\x20\x94\x6d\xd0\x3b\x01\x7c\x7d\xfd\xf1\xbd\xdc\xeb\x40\x98\x11\x65\xa3\xa3\x66\x32\x00\x1a\x6c\x34\x6f\x45\x02\x96\xf1\xb8\xc7\x9c\x0c\x60\x34\x21\x28\x8a\x3a\xf6\xa4\x96\xe9\x08\xc4\x62\x69\x1d\x61\x88\x1f\x9a\x8d\x36\xcc\xf4\xf9\xe7\xb7\xe7\x62\x5e\x63\xeb\x03\xa2\x6b\xe6\x77\x59\xb3\xcc\x89\xf0\x0e\xd4\x53\x1d\xa0\x5a\xa9\xa4\x26\x5f\x1d\x50\x6f\x1f\x47\x1a\xc6\xf7\x2e\x36\x7e\x70\x37\xc9\xa8\xe0\xbb\xce\xba\x35\x58\x07\x8a\x75\xce\xb2\x68\xbc\x6b\xe8\x19\xdb\x78\x95\xb6\x90\xdc\x2e\x0b\xbc\x1f\x89\x1a\xed\x1a\xcb\x15\x45\x2a\x37\xde\xba\x82\x61\xf3\x85\xc8\x2f\xe1\xa9\x5e\x5d\x70\x83\x75\x0e\x43\xf2\x55\xd5\xab\x49\x6f\xa7\xd9\x69\xd4\x65\xbf\x47\x37\xd5\xe2\xab\x0c\x0b\x01\x36\x17\xb5\xd3\x78\x86\x4c\xe7\x69\x72\x82\xae\xa2\x4f\x0c\x53\xf4\x18\x02\x57\x6a\x82\x9e\x3b\x45\xbe\xc3\x92\x65\xce\xc7\x39\x3b\x3d\x06\x29\xf3\x0b\xfe\xed\x91\xe4\x39\x09\x5c\xc9\x74\x72\x49\xd5\x28\xa4\xee\x24\x70\xa9\x3f\x87\x7f\xab\x1a\x9d\x62\x63\x1b\x6c\x5b\x59\xb7\x78\xb0\xe9\x80\x17\xb9\x83\xfa\x93\x54\x92\x48\x66\x79\x91\x96\x8e\x4d\x66\x7f\xe7\x5b\x10\x5f\xb4\x48\x0f\x88\x62\xe0\x81\xb3\xed\xb1\x18\x59\x58\x64\xd7\xff\x03\x00\x00\xff\xff\xf0\xc6\xca\xbb\xfe\x03\x00\x00")

func assetsJsAppJsBytes() ([]byte, error) {
	return bindataRead(
		_assetsJsAppJs,
		"assets/js/app.js",
	)
}

func assetsJsAppJs() (*asset, error) {
	bytes, err := assetsJsAppJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/js/app.js", size: 1022, mode: os.FileMode(420), modTime: time.Unix(1469990223, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/css/body.css": assetsCssBodyCss,
	"assets/html/index.html": assetsHtmlIndexHtml,
	"assets/js/app.js": assetsJsAppJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"css": &bintree{nil, map[string]*bintree{
			"body.css": &bintree{assetsCssBodyCss, map[string]*bintree{
			}},
		}},
		"html": &bintree{nil, map[string]*bintree{
			"index.html": &bintree{assetsHtmlIndexHtml, map[string]*bintree{
			}},
		}},
		"js": &bintree{nil, map[string]*bintree{
			"app.js": &bintree{assetsJsAppJs, map[string]*bintree{
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

